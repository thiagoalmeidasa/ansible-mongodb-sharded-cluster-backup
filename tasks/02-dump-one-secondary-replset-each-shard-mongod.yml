---
- name: MONGOD | Get replset member status on each shard
  command: '{{ mongodb_shell.check_replset_secondary }}'
  register: replset_secondary_status
  vars:
    mongo_port: '{{ mongod_port }}'
    mongo_host: '{{ item }}'
  loop: '{{ ansible_play_batch }}'
  run_once: true

- name: MONGOD | Set secondary nodes for each shard
  set_fact:
    "{{ ec2_tag_cluster_name | replace('-', '_') }}_{{ ec2_tag_shard_name | replace('-', '_') }}_secondaries": "{{\
      \  replset_secondary_status.results | selectattr('stdout', 'match', 'true')\
      \ | map (attribute='item') | list }}"
  run_once: true

- name: MONGOD | Show all secondary nodes on each replset for each shard for each
    cluster
  debug:
    msg: '{{ lookup("vars", ec2_tag_cluster_name | replace("-", "_") + "_" + ec2_tag_shard_name
      | replace("-", "_") + "_secondaries") }}'
  run_once: true

- name: MONGOD | Setting mongo_host fact
  set_fact:
    mongo_host: '{{ lookup("vars", ec2_tag_cluster_name | replace("-", "_") + "_"
      + ec2_tag_shard_name | replace("-", "_") + "_secondaries") | first }}'

- name: MONGOD | Locking one secondary replset on each shard
  command: '{{ mongodb_shell.lock_secondary_replset }}'
  args:
    creates: /tmp/fsync.lock
  vars:
    mongo_port: '{{ mongod_port }}'
  when: ansible_host == mongo_host

- name: MONGOD | Check if mongod backup dir exists
  file:
    path: '{{ mongod_backup_dir }}'
    state: directory
  when: ansible_host == mongo_host

- name: MONGOD | Dumping data from one secondary replset on each shard
  command: mongodump {{ mongo_opts }} --uri mongodb://{{ mongodb_backup_user }}:{{
    mongodb_backup_pass }}@{{ mongo_host }}:{{ mongo_port }} -o {{ mongod_backup_dir
    }}
  vars:
    mongo_port: '{{ mongod_port }}'
    mongo_opts: --oplog --gzip
  args:
    creates: /tmp/mongodb.dumped
  when: ansible_host == mongo_host

- name: MONGOD | Unlocking one secondary replset on each shard
  command: '{{ mongodb_shell.unlock_secondary_replset }}'
  vars:
    mongo_port: '{{ mongod_port }}'
  when: ansible_host == mongo_host

- name: MONGOD | Install required packages to publish dump to S3
  yum:
    name:
    - python27-dateutil.noarch
    - python27-boto3.noarch
    - python27-botocore.noarch
    state: latest
    update_cache: yes
  when: ansible_host == mongo_host

- name: MONGOD | Publish dump to s3
  s3_sync:
    bucket: '{{ mongodb_backup_s3_bucket }}'
    key_prefix: '{{ mongodb_backup_s3_key_prefix }}'
    file_root: '{{ mongodb_backup_root_dir }}/mongod/'
    aws_access_key: '{{ aws_access_key }}'
    aws_secret_key: '{{ aws_secret_key }}'
    aws_region: '{{ aws_region }}'
  when:
  - ansible_host == mongo_host
  - publish_to_s3

- name: MONGOD | Cleaning backup locks and dirs
  file:
    path: '{{ item }}'
    state: absent
  loop:
  - /tmp/mongodb.dumped
  - /tmp/fsync.lock
  - '{{ mongodb_backup_root_dir }}'
  when: ansible_host == mongo_host
